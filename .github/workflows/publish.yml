name: Publish Package

on:
  push:
    branches: [main]
    paths:
      - 'CHANGELOG.md'

permissions:
  contents: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from CHANGELOG
        id: version
        run: |
          VERSION=$(grep -m 1 "^## \[.*\]" CHANGELOG.md | sed -n 's/## \[\(.*\)\].*/\1/p')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from CHANGELOG.md"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check if version exists on npm
        id: check_npm
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if npm view @jsoncut/mcp-server@$VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION does not exist on npm"
          fi

      - name: Check if git tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION does not exist"
          fi

      - name: Setup Node.js
        if: steps.check_npm.outputs.exists == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Update version in package.json
        if: steps.check_npm.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          npm version $VERSION --no-git-tag-version
          echo "Updated package.json to version $VERSION"

      - name: Update version in src/index.ts
        if: steps.check_npm.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/version: '[^']*'/version: '$VERSION'/" src/index.ts
          echo "Updated src/index.ts to version $VERSION"

      - name: Install dependencies
        if: steps.check_npm.outputs.exists == 'false'
        run: npm ci

      - name: Build
        if: steps.check_npm.outputs.exists == 'false'
        run: npm run build

      - name: Commit version updates
        if: steps.check_npm.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json src/index.ts
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
          git push

      - name: Create Git Tag
        if: steps.check_npm.outputs.exists == 'false' && steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Publish to npm
        if: steps.check_npm.outputs.exists == 'false'
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract changelog for release
        if: steps.check_npm.outputs.exists == 'false'
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract changelog section for this version
          CHANGELOG=$(awk "/^## \[$VERSION\]/,/^## \[/{if(/^## \[/ && !/^## \[$VERSION\]/)exit;print}" CHANGELOG.md | sed '1d;$d')
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release version $VERSION"
          fi
          # Save to file to handle multiline
          echo "$CHANGELOG" > release_notes.txt

      - name: Create GitHub Release
        if: steps.check_npm.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: v${{ steps.version.outputs.version }}
          body_path: release_notes.txt
          draft: false
          prerelease: false
